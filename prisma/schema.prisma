// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                            String      @id @default(cuid())
  userId                        String      @map("user_id")
  type                          String
  provider                      String
  providerAccountId             String      @map("provider_account_id")
  refresh_token                 String?     @db.Text
  access_token                  String?     @db.Text
  expires_at                    Int?
  token_type                    String?
  scope                         String?
  id_token                      String?     @db.Text
  session_state                 String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                            String      @id @default(cuid())
  sessionToken                  String      @unique @map("session_token")
  userId                        String      @map("user_id")
  expires                       DateTime
  user                          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                            String      @id @default(cuid())
  name                          String?
  surname                       String?
  username                      String?     @unique
  email                         String?     @unique
  emailVerified                 DateTime?   @map("email_verified")
  emailVerificationToken        String?     @unique @map("email_verification_token")
  passwordHash                  String?     @map("password_hash")
  resetPasswordToken            String?     @unique @map("reset_password_token")
  resetPasswordTokenExpiry      DateTime?   @map("reset_password_token_expiery")
  image                         String?

  createdAt                     DateTime    @default(now()) @map("created_at")
  updatedAt                     DateTime?   @default(now()) @map("updated_at")

  accounts                      Account[]
  sessions                      Session[]
  questions                     Question[]
  answers                       Answer[]

  @@map("users")
}

model VerificationToken {
  identifier                    String
  token                         String      @unique
  expires                       DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Question {
  id                            String      @id @default(cuid())
  title                         String      @unique
  explanation                   String
  views                         Int         @default(0)
  upvotes                       Int         @default(0)
  downvotes                     Int         @default(0)
  userId                        String      @map("user_id")

  createdAt                     DateTime    @default(now()) @map("created_at")
  updatedAt                     DateTime    @default(now()) @map("updated_at")

  user                          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                          Tag[]
  answers                       Answer[]

  @@map("questions")
}


model Tag {
  id                            String      @id @default(cuid())
  name                          String      @unique
  questions                     Question[]

  @@map("tags")
}




model Answer {
  id                           String      @id @default(cuid())
  userId                       String      @map("user_id")
  questionId                   String      @map("question_id")
  body                         String
  upvotes                      Int         @default(0)
  downvotes                    Int         @default(0)

  createdAt                    DateTime    @default(now()) @map("created_at")
  updatedAt                    DateTime    @default(now()) @map("updated_at")

  question                     Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}